struct Cpu {
	pc: u16,
	i: u16,
	memory: [u8; 4096],
	v: [u8; 16],
	stack: [u16; 16],
	sp: u8,
	dt: u8,
	st: u8
}

impl Cpu {
	fn init(&mut self) {
		// Initialize pc, index, stack pointer
		self.pc = 0x200;
		self.i = 0;
		self.sp = 0;

		// Clear stuff
		self.stack = [0; 16];

		// Clear registers
		self.v = [0; 16];  

		// Load fontset
		for (mem, font) in self.memory.iter_mut().zip(FONT_SET.iter()) {
    		*mem = *font
		} 
		// Initialize timers
		self.dt = 60;
		self.st = 0;
	}

	fn emulate_cycle(&mut self) {
		// Fetch opcode
		let opcode: u16 = (self.memory[self.pc as usize] as u16) << 8 | (self.memory[(self.pc + 1) as usize] as u16);

		// Decode opcode

		// Update timers
		if(self.dt > 0) {
			--self.dt;
		}

		if(self.st > 0) {
			if(self.st == 1) {
				println!("BEEP!");
			}
			--self.st;
		}
	}
}

const FONT_SET: [u8; 80] = [
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];